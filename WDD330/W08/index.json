{
  "title": "Week 8: Fetch API and CORS",
  "links": [
    {
      "url": "W08/index.html",
      "label": "Team Project (Pokemon API)",
      "info": "Navigating the Pokemon universe, one page at a time."
    },
    {
      "url": "syntax.html?W08/js/main.js",
      "label": "main.js"
    },
    {
      "url": "syntax.html?W08/js/modal.js",
      "label": "modal.js"
    },
    {
      "url": "syntax.html?W08/js/paginator.js",
      "label": "paginator.js"
    },
    {
      "url": "syntax.html?W08/js/spinner.js",
      "label": "spinner.js"
    },
    {
      "url": "syntax.html?W08/css/style.css",
      "label": "style.css",
      "info": "CSS: Where the <strong style='color:red'>magic</strong> happens."
    },
    {
      "url": "W08/transforms.html",
      "label": "CSS Transforms, Transitions, and Animations (from JavaScript: Novice to Ninja)",
      "info": "<em>Put 'em up!</em>"
    },
    {
      "url": "syntax.html?W08/css/transforms.css",
      "label": "transforms.css"
    }
  ],
  "questions": [
    "For me, the <a href='https://swapi.dev' target='_blank'>Star Wars API</a> was failing due to security restrictions in Chromium. It turns out that I might have been too restrictive in my fetch requests. Apparently, factors such as referrer policy can make a difference to routing technology in the age of CORS. I switched over to the <a href='https://pokeapi.co' target='_blank'>Pokemon API</a> to see if it worked better, but ran afoul of similar issues until I sorted out my request syntax.<br/><code><pre>const response = await fetch(url, {\n  method: \"GET\",\n  headers: { \"Content-type\": \"application/json;charset=UTF-8\" },\n});  </pre></code><br />Unfortunately, sending a <code>'Content-Type'</code> header causes the browser to send a preflight OPTIONS request, which was denied. When I changed this to an <code>'Accept'</code> header, all was well. ",
    "Modal dialogs are trickier than simply displaying some UI. If you consider keyboard focus, it's important that the dialog gains focus when it appears, and that the triggering element regains focus after the dialog is dismissed. Visit !!LINK 0!! to try it out. ",
    "Mobile UX is tricky, as you know. This week's project adjusts layout based on <code>(pointer: coarse)</code> media query to provide a better touch experience. Additionally, the page has a spinner that appears during long downloads over slow networks.",
    "Because the horizontal pagination control overflows its container on narrow screens, I trim half of the elements to make it fit. You might notice that you can only select even-numbered pages on very narrow screens. ",
    "And lastly, I do hope you scroll ðŸ‘‡ all the way to the ðŸ‘‡ bottom of !!LINK 6 the animations page!!. There's a surprise down there for you. ðŸ˜Ž"
  ]
}
