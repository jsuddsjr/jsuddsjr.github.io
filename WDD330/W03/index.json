{
  "title": "Week 3: JavaScript Objects",
  "links": [
    {
      "url": "W03/index-START.html",
      "label": "Team Activity",
      "info": "Fun with arrays!"
    },
    {
      "url": "W03/js-object-methods.html",
      "label": "Object methods, this (from JavaScript.info)",
      "info": "Source: <a href='https://javascript.info/object-methods' target='_blank'>javascript.info</a>"
    },
    {
      "url": "W03/js-object-calculator.html",
      "label": "A calculator object"
    },
    {
      "url": "W03/js-object-ladder.html",
      "label": "A chainable ladder object"
    },
    {
      "url": "W03/js-this-context.html",
      "label": "The six contexts of <code>this</code>"
    },
    {
      "url": "W03/js-object-literals.html",
      "label": "Objects (from JavaScript: Novice to Ninja)",
      "info": "More fun with objects!"
    },
    {
      "url": "W03/js-object-this.html",
      "label": "More objects, plus JSON",
      "info": "<strong>BONUS</strong>: Roll any quantity of dice with any number of sides!"
    },
    {
      "url": "W03/js-object-math.html",
      "label": "Math object"
    },
    {
      "url": "W03/js-object-date.html",
      "label": "Date object"
    },
    {
      "url": "W03/js-object-regexp.html",
      "label": "RegExp object"
    },
    {
      "url": "W03/js-object-dom.html",
      "label": "DOM objects"
    },
    {
      "url": "W03/js-object-dom2.html",
      "label": "DOM objects (continued)",
      "info": "Who needs heroes when you have a squad?"
    },
    {
      "url": "W03/js-events.html",
      "label": "JavaScript events"
    }
  ],
  "questions": [
    "What's the easiest way to count strings in an array?",
    "I tend to JSDoc to apply types to vanilla JavaScript to enable Intellisense in my IDE (VS Code). I'm still learning that sometimes the IntelliSense works without it, but it's a hard habit to break. ",
    "There are six different ways where <code>this</code> can take on new values! <ul><li><code>this</code> in global context</li><li><code>this</code> in object construction</li><li><code>this</code> in object method</li><li><code>this</code> in simple function</li><li><code>this</code> in an arrow function</li><li><code>this</code> in an event listener</li></ol>",
    "Event listeners appear to depend on the type of callback definition. <pre>button.addEventListener(\"click\", function () {\n  alert(this); // button\n});\n\nbutton.addEventListener(\"click\", () => {\n  alert(this); // Window\n});</pre>See <a href='W03/js-this-context.html#testThisInEventListener'>The six contexts of <code>this</code></a>.",
    "Interesting that you have to pass an empty object even when all the object properties have default values. (See <a href='W03/js-object-literals.html#testPassingObjects'>Passing Objects</a>.)"
  ]
}
